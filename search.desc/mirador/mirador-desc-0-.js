searchState.loadedDescShard("mirador", 0, "Main application module for Mirador.\nGame state management module.\nMath utilities and types for 3D graphics and game logic.\nMaze Generation, Encoding, and Animation module.\nMain renderer module.\nUser interface module.\nMain application object for Mirador.\nHolds all state required for a running Mirador game …\nHandles device-level events, such as mouse motion for …\nThe egui renderer for UI overlays.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe main game state (player, timing, maze, etc.).\nUpdates frame timing, FPS, and delta time in the game …\nUpdates the title screen maze and loading bar, and uploads …\nAdvances the maze generation animation and uploads new …\nHandles redraw requests, updates game state, renders the …\nHandles window resize events and updates the rendering …\nThe WGPU instance for the application.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current input state (pressed keys, etc.).\nAsynchronously creates a new <code>AppState</code> with initialized …\nCreates a new <code>App</code> with a fresh WGPU instance and no window …\nResizes the WGPU surface and updates the configuration.\nCalled when the application is resumed; creates the window …\nAsynchronously sets up the application window and …\nThe current application state (renderers, game, UI, etc.).\nThe text renderer for all game UI text elements.\nHandles mouse capture and cursor visibility based on game …\nThe current UI state (sliders, colors, etc.).\nUpdates all game UI elements including timer, level, and …\nThe WGPU renderer for the main game and background.\nThe application window.\nHandles all window-level events, including input, …\nRepresents the entire mutable state of the game.\nGame timer state\nManages game-specific UI elements like timers, scores, …\nTimer configuration for game elements\nWhether the mouse is captured for camera movement.\nSpatial partitioning and collision detection system for 3D …\nHandles collisions between game entities.\nCurrent frames per second.\nReturns a new <code>GameState</code> with default values.\nTime elapsed since the last frame (seconds).\nWhether the exit has been reached.\nNumber of frames rendered since start.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the game timer is expired\nKeyboard and mouse input handling for the game.\nTime of the last FPS update.\nTime of the last frame.\nPath to the currently loaded maze, if any.\nCreates a new <code>GameState</code> with default player, timing, and …\nPlayer state and movement logic.\nThe player character.\nReset the game timer\nUpdate game level\nUpdate game score\nStart the game timer\nStop the game timer\nAxis-Aligned Bounding Box (AABB) for efficient collision …\nBounding Volume Hierarchy for efficient spatial …\nA node in the Bounding Volume Hierarchy tree structure.\nHigh-level collision detection and response system.\nRepresents a single wall face for collision detection.\nGets a reference to the AABB of this node.\nBounding box for this face.\nBuilds the BVH from a collection of wall faces.\nBuilds the collision BVH from maze geometry.\nRecursively builds the BVH tree structure.\nCalculates the normal vector for the wall face.\nCalculates the center point of the AABB.\nChecks for collisions and resolves them with realistic …\nThe four corners of the wall face.\nCreates an X-facing wall face (perpendicular to X axis).\nCreates a Z-facing wall face (perpendicular to Z axis).\nEvaluates the cost of a potential split.\nExpands this AABB to fully contain another AABB.\nExtracts wall faces from the maze grid for collision …\nFinds the best axis and position to split the faces.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an AABB from a wall face defined by its four …\nChecks if this AABB intersects with another AABB.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new AABB from minimum and maximum corner points.\nCreates a new wall face from four corners.\nCreates a new empty Bounding Volume Hierarchy.\nCreates a new collision system with specified player …\nThe face normal vector.\nQueries the BVH for potential collisions with a player …\nRecursively queries the BVH tree for potential collisions.\nResolves collision with a single wall using vector …\nCalculates the surface area of the AABB.\nEscape key (toggle mouse capture).\nEnum representing all possible in-game actions that can be …\nJump (Space).\nTracks the set of currently pressed game keys.\nLeft mouse button.\nRight mouse button.\nMove player backward (S or Down Arrow).\nMove player forward (W or Up Arrow).\nMove player left (A or Left Arrow).\nMove player right (D or Right Arrow).\nQuit the game (Q).\nSprint (Shift).\nToggle Bounding Boxes (B).\nToggle UI sliders (C).\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if a key is currently pressed.\nCreates a new, empty <code>KeyState</code>\nMarks a key as pressed.\nSet of currently pressed keys.\nMarks a key as released.\nUpdates the <code>GameState</code> based on the current pressed keys.\nConverts a winit <code>keyboard::Key</code> to a <code>GameKey</code> if it matches …\nRepresents the player character’s state in the world.\nBase movement speed (units per second).\nCurrent Cell\nField of view (degrees).\nReturns the argument unchanged.\nComputes the view matrix for the player’s current …\nCalls <code>U::from(self)</code>.\nUpdates the player’s orientation based on mouse movement.\nMouse sensitivity multiplier.\nMoves the player backward based on current yaw and speed.\nMoves the player forward based on current yaw and speed.\nMoves the player left based on current yaw and speed.\nMoves the player right based on current yaw and speed.\nEnhanced movement with collision detection and resolution.\nCreates a new <code>Player</code> with default starting position and …\nPitch (up/down look), in degrees.\nPlayer’s world position <code>[x, y, z]</code>.\nCurrent movement speed (units per second).\nYaw (left/right look), in degrees.\nConverts degrees to radians.\n4x4 matrix type and operations for 3D graphics …\nConverts radians to degrees.\n3D vector type and operations for graphics and math.\nA 4x4 matrix with memory layout compatible for GPU buffers.\nReturns the argument unchanged.\nConstructs an identity matrix.\nCalls <code>U::from(self)</code>.\nComputes the inverse of an affine transformation matrix.\nMultiplies two matrices (self * b).\nConstructs an orthographic projection matrix.\nConstructs a perspective projection matrix.\nConstructs a rotation matrix around the X axis.\nConstructs a rotation matrix around the Y axis.\nConstructs a rotation matrix around the Z axis.\nConstructs a scaling matrix.\nConstructs a translation matrix.\nA 3D vector with memory layout compatible for GPU buffers.\nReturns a reference to the vector’s components as an …\nComputes the cross product of two vectors.\nComputes the dot product of two vectors.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nComputes the Euclidean length (magnitude) of the vector.\nCreates a new <code>Vec3</code> from components.\nNormalizes the vector to unit length.\nReturns the x component of the vector.\nReturns the y component of the vector.\nReturns the z component of the vector.\nMaze generation using Kruskal’s algorithm with …\nMaze generation animation renderer module.\nParses a maze file into a 2D vector of wall booleans and …\nRepresents a cell in the maze grid\nRepresents an edge between two cells in the maze\nRepresents a maze with walls and passages\nMaze generator using Kruskal’s algorithm\nUnion-Find data structure for Kruskal’s algorithm\nFirst cell connected by the edge\nSecond cell connected by the edge\nColumn index of the cell\nSet of cells currently connected in the maze\nExit cell of the maze (if set)\nWhether we’re in fast mode\nNumber of edges remaining when we switch to fast mode\nFinds the root of the set containing the given cell\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicates if generation is complete\nReturns the dimensions of the rendered maze in pixels\nReturns the current progress of generation (processed …\nReturns the generation progress as a ratio (0.0 to 1.0)\nGenerates pixel data for rendering the maze\nHeight of the maze in cells\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if maze generation is complete\nAdds a new cell to the UnionFind structure\nThe maze being generated (wrapped in Arc for thread safety)\nCreates a new UnionFind structure\nCreates a new maze generator with the given dimensions …\nCreates a new Cell with the given coordinates\nCreates a new Edge between two cells\nCreates a new maze with all walls present\nNumber of edges processed during generation\nRow index of the cell\nSaves the current maze to a timestamped file in the …\nSets a random cell as the exit\nPerforms one step of maze generation Returns true if a …\nTotal number of edges in the maze\nUnions two sets containing cell1 and cell2 Returns true if …\n2D vector representing walls (true) and passages (false)\nWidth of the maze in cells\nHandles rendering of the maze and loading bar on the maze …\nReturns the argument unchanged.\nMaze generator for producing new mazes.\nConvenience method to get maze progress for loading bar.\nGet maze dimensions for texture updates.\nCalls <code>U::from(self)</code>.\nCheck if maze generation is complete.\nTimestamp of the last update (for animation/timing).\nShared, thread-safe reference to the current maze.\nCreates a new simplified maze generation animation screen …\nRenders the exit cell with the special shader effect.\nTexture containing the maze image.\nUpdates the exit shader animation.\nUpdates the loading bar progress.\nUpdates the maze texture with new pixel data.\nBackground rendering module.\nDebug rendering utilities for visualizing collision …\nWGPU Pipeline Builder Utilities\nMaze Generation Animation Rendering System\nUniform buffer utilities for wgpu rendering.\nVertex definitions and geometry generation for maze and …\nWGPU-based renderer for the Mirador game.\nAnimated starfield background renderer.\nRepresents a single star in the starfield.\nHandles GPU resources and rendering pipeline for the …\nUniform buffer for background color (RGBA).\nBrightness multiplier (0.0 = dim, 1.0 = bright).\nCreates the render pipeline and uniform bind group for the …\nCreates a <code>StarRenderer</code> with randomly generated stars and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex buffer for drawing star quads as triangles.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of indices to draw.\nRender pipeline for the starfield.\n2D position in screen space, range [-1.0, 1.0].\nSize of the star (radius in NDC units).\nUniform buffer for animation time.\nBind group for uniforms.\nUpdates the background color used by the starfield shader.\nUpdates the animation time uniform for the starfield …\nVertex buffer containing star quad vertices.\nMaterial ID for debug bounding boxes\nCollects all wall face AABB debug vertices from the BVH …\nHelper function to recursively collect wall face AABBs …\nGenerates vertices for rendering an AABB as a solid …\nWhether to render bounding boxes for debugging.\nVertex buffer for the debug renderer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuilder for creating bind group layouts with common …\nBuilder for creating render pipelines with common patterns …\nBuild the render pipeline with the configured parameters.\nBuild the bind group layout.\nCreate a vertex buffer containing a fullscreen quad.\nHelper for creating uniform buffers\nCreate a vertex buffer layout for 2D positions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new pipeline builder with default settings.\nCreate a new bind group layout builder.\nEnable standard alpha blending.\nAdd a bind group layout to the pipeline.\nSet a custom blend state for color blending.\nSet depth and stencil testing configuration.\nSet the fragment shader entry point function name.\nSet the pipeline label for debugging purposes.\nSet the bind group layout label for debugging.\nDisable face culling.\nAdd a filtering sampler binding.\nSet the shader source code (WGSL format).\nAdd a 2D texture binding.\nAdd a uniform buffer binding.\nAdd a vertex buffer layout to the pipeline.\nSet the vertex shader entry point function name.\nRenders animated procedural effects for the maze exit cell.\nUniform data structure for the exit shader effects.\nMain renderer for the 3D maze game.\nRenders an animated progress bar for loading operations.\nUniform data structure for the loading bar shader.\nConfiguration for maze rendering setup\nRenders a maze texture to the screen with proper scaling …\nBind group containing the maze texture and sampler\nBind group containing the uniform buffer\nDevelopment tools for rendering bounding boxes and debug …\nOptional depth buffer for proper 3D occlusion (recreated …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new maze renderer.\nCreate a new loading bar renderer.\nThe render pipeline configured for maze texture rendering\nThe render pipeline configured for loading bar rendering …\nRender the maze to the current render pass.\nRender the loading bar to the current render pass.\nBackground renderer for animated starfield effects.\nWebGPU bind group linking uniform buffer to shader binding …\nGPU buffer storing model-view-projection matrix for vertex …\nUniform buffer storing the current progress value\nUpdate the loading progress.\nCombined vertex buffer containing both floor and wall …\nVertex buffer containing fullscreen quad vertices\nVertex buffer containing fullscreen quad vertices\nTotal number of vertices to render from the combined …\nCreate the level display\nCreate the score display\nCreate a new text buffer with the given ID, text, style, …\nCreate the main timer display\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitialize all game UI elements\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad a font from a file path and register it with a name\nPrepare text rendering for the current frame\nRender all visible text buffers\nResize the viewport and atlas\nTrim the atlas to free up unused space\nUpdate all game UI elements - call this every frame\nUpdate the position of an existing buffer\nUpdate the style of an existing buffer\nUpdate the text content of an existing buffer\nUniforms for the main render pipeline.\nReturns the raw bytes of the uniform struct for uploading …\nCreates a bind group and layout for the uniform buffer.\nCreates a GPU buffer containing the uniform data.\nReturns a new <code>Uniforms</code> with all elements set to zero.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe 4x4 transformation matrix (e.g., MVP matrix).\nCreates a new <code>Uniforms</code> with all elements set to zero.\nVertex data for rendering maze and floor geometry.\nRGBA color (normalized 0-255).\nGenerates vertices for a large square floor centered at …\nGenerates wall geometry for a maze grid.\nCreates a wall quad facing the X direction (parallel to Z …\nCreates a wall quad facing the Z direction (parallel to X …\nReturns the vertex buffer layout for use in a wgpu …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaterial type (0 = floor, 1 = wall).\n3D position in world space.\nMain WGPU renderer for the Mirador game.\nThe WGPU device for resource creation.\nReturns the argument unchanged.\nMain render pipeline for the maze and floor.\nCalls <code>U::from(self)</code>.\nRenderer for the loading screen maze and loading bar.\nInitializes a new <code>WgpuRenderer</code> and all associated GPU …\nThe WGPU queue for submitting commands.\nThe WGPU surface for presenting rendered frames.\nThe surface configuration (format, size, etc.).\nRenders the current frame to the surface, including the …\negui integration for wgpu rendering.\nMain egui rendering system for wgpu.\nBegins a new UI frame.\nGets the egui context for building UI.\nCompletes the frame and renders the UI.\nReturns the argument unchanged.\nProcesses window input events.\nCalls <code>U::from(self)</code>.\nCreates a new EguiRenderer instance.\nSets the pixels-per-point (PPI scaling) for the UI.\nProvides a custom dark theme for egui.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")