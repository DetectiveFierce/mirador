searchState.loadedDescShard("mirador", 0, "Game state management module.\nMath utilities and types for 3D graphics and game logic.\nMain renderer module.\nTest mode functionality for Mirador.\nAppState module for Mirador.\nEvent handler module for Mirador.\nUpdate logic for Mirador App.\nHolds all state required for a running Mirador game …\nReturns the argument unchanged.\nThe main game state (player, timing, maze, etc.).\nUpdates the title screen maze and loading bar, and uploads …\nCalls <code>U::from(self)</code>.\nThe current input state (pressed keys, etc.).\nAsynchronously creates a new <code>AppState</code> with initialized …\nResizes the WGPU surface and updates the configuration.\nThe text renderer for all game UI text elements.\nHandles mouse capture and cursor visibility based on game …\nUpdates all game UI elements including timer, level, and …\nThe WGPU renderer for the main game and background.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the entire mutable state of the game.\nWhether the mouse is captured for camera movement.\nSpatial partitioning and collision detection system for 3D …\nHandles collisions between game entities.\nCurrent frames per second.\nReturns a new <code>GameState</code> with default values.\nTime elapsed since the last frame (seconds).\nWhether the exit has been reached.\nNumber of frames rendered since start.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nSets up the timer, score, and level display using the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if the game timer is expired\nWhether the player is currently in test mode\nKeyboard and mouse input handling for the game.\nTime of the last FPS update.\nTime of the last frame.\nMaze Generation, Encoding, and Animation module.\nPath to the currently loaded maze, if any.\nCreates a new <code>GameState</code> with default player, timing, and …\nPlayer state and movement logic.\nThe player character.\nThe screen that was active before entering pause menu\nReset the game timer\nUpdate game level\nUpdate game score\nStart the game timer\nStop the game timer\nCall this every frame to update the timer, score, and …\nHelper to update the text content of a buffer and re-apply …\nPlay the completion sound effect\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRestart background music (used when starting a new game)\nReset audio volumes to normal game levels\nAdjust audio volumes for pause menu (softer background …\nAdjust audio volumes for title screen (louder background …\nStart or restart the background music track\nPlay the wall hit sound effect\nAxis-Aligned Bounding Box (AABB) for efficient collision …\nBounding Volume Hierarchy for efficient spatial …\nA node in the Bounding Volume Hierarchy tree structure.\nHigh-level collision detection and response system.\nRepresents a single wall face for collision detection.\nGets a reference to the AABB of this node.\nBounding box for this face.\nBuilds the BVH from a collection of wall faces.\nBuilds the collision BVH from maze geometry.\nRecursively builds the BVH tree structure.\nCalculates the normal vector for the wall face.\nCalculates the center point of the AABB.\nChecks for collisions and resolves them with realistic …\nThe four corners of the wall face.\nCreates an X-facing wall face (perpendicular to X axis).\nCreates a Z-facing wall face (perpendicular to Z axis).\nHelper function for when the cylinder path is parallel to …\nPerforms cylinder-wall face intersection test.\nEvaluates the cost of a potential split.\nExpands this AABB to fully contain another AABB.\nExtracts wall faces from the maze grid for collision …\nFinds the best axis and position to split the faces.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an AABB from a wall face defined by its four …\nChecks if this AABB intersects with another AABB.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new AABB from minimum and maximum corner points.\nCreates a new wall face from four corners.\nCreates a new empty Bounding Volume Hierarchy.\nCreates a new collision system with specified player …\nThe face normal vector.\nHelper function to check if a point (expanded by radius) …\nQueries the BVH for potential collisions with a player …\nRecursively queries the BVH tree for potential collisions.\nResolves collision with a single wall using vector …\nCalculates the surface area of the AABB.\nCalculates a new target point with level-based aggression\nGets the distance to the current target\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current aggression level for debugging\nGets the current movement direction\nCheck if the enemy has reached its current target\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnhanced path safety checking with level-based precision\nDetermines if the enemy needs a new target with …\nPlaces an enemy strategically with level-based positioning\nConvenience function for level-aware standard enemy …\nScales enemy aggression based on level\nUpdates the enemy’s position (call this when the enemy …\nUpdates enemy with level-based aggression scaling\nMain pathfinding update function with level awareness\nUpdates aggression parameters based on level\nUpdates stuck detection with level-based sensitivity\nValidates and adjusts enemy position to ensure it doesn’…\nEscape key (toggle mouse capture).\nEnum representing all possible in-game actions that can be …\nJump (Space).\nTracks the set of currently pressed game keys.\nLeft mouse button.\nRight mouse button.\nMove player backward (S or Down Arrow).\nMove player forward (W or Up Arrow).\nMove player left (A or Left Arrow).\nMove player right (D or Right Arrow).\nQuit the game (Q).\nSprint (Shift).\nToggle Bounding Boxes (B).\nToggle UI sliders (C).\nToggle Upgrade Menu (U).\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if a key is currently pressed.\nCreates a new, empty <code>KeyState</code>\nMarks a key as pressed.\nSet of currently pressed keys.\nMarks a key as released.\nUpdates the <code>GameState</code> based on the current pressed keys.\nConverts a winit <code>keyboard::Key</code> to a <code>GameKey</code> if it matches …\nMaze generation using Kruskal’s algorithm with …\nParses a maze file into a 2D vector of wall booleans and …\nRepresents a cell in the maze grid\nRepresents an edge between two cells in the maze\nRepresents a maze with walls and passages\nMaze generator using Kruskal’s algorithm\nUnion-Find data structure for Kruskal’s algorithm\nFirst cell connected by the edge\nSecond cell connected by the edge\nColumn index of the cell\nSet of cells currently connected in the maze\nExit cell of the maze (if set)\nWhether we’re in fast mode\nNumber of edges remaining when we switch to fast mode\nFinds the root of the set containing the given cell\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicates if generation is complete\nReturns the dimensions of the rendered maze in pixels\nGet the actual maze dimensions (number of cells, not wall …\nReturns the current progress of generation (processed …\nReturns the generation progress as a ratio (0.0 to 1.0)\nGenerates pixel data for rendering the maze\nHeight of the maze in cells\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if maze generation is complete\nCheck if a position is walkable (not a wall) This method …\nAlternative method: check if a position is a wall\nAdds a new cell to the UnionFind structure\nThe maze being generated (wrapped in Arc for thread safety)\nCreates a new UnionFind structure\nCreates a new maze generator with the given dimensions …\nCreates a new Cell with the given coordinates\nCreates a new Edge between two cells\nCreates a new maze with all walls present\nNumber of edges processed during generation\nRow index of the cell\nSaves the current maze to a timestamped file in the …\nSets a random cell as the exit\nPerforms one step of maze generation Returns true if a …\nTotal number of edges in the maze\nUnions two sets containing cell1 and cell2 Returns true if …\n2D vector representing walls (true) and passages (false)\nWidth of the maze in cells\nRepresents the player character’s state in the world.\nBase movement speed (units per second).\nCurrent Cell\nField of view (degrees).\nReturns the argument unchanged.\nComputes the view matrix for the player’s current …\nCalls <code>U::from(self)</code>.\nUpdates the player’s orientation based on mouse movement.\nMouse sensitivity multiplier.\nMoves the player backward based on current yaw and speed.\nMoves the player forward based on current yaw and speed.\nMoves the player left based on current yaw and speed.\nMoves the player right based on current yaw and speed.\nEnhanced movement with collision detection and resolution.\nCreates a new <code>Player</code> with default starting position and …\nPitch (up/down look), in degrees.\nPlayer’s world position <code>[x, y, z]</code>.\nSpawns the player at the bottom-left cell of the maze.\nCurrent movement speed (units per second).\nCall this every frame to update stamina based on sprinting …\nYaw (left/right look), in degrees.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCoordinate system transformations for the maze.\nConverts degrees to radians.\n4x4 matrix type and operations for 3D graphics …\nConverts radians to degrees.\n3D vector type and operations for graphics and math.\nEnum representing cardinal directions in the maze\nCalculates the size of a single cell in world units.\nConstants for special positions in the maze\nTranslates a direction into a yaw angle.\nReturns the argument unchanged.\nGets the cell adjacent to the given cell in the specified …\nGets the bottom-left cell of the maze.\nCalculates the world coordinates of the bottom-left cell …\nGets the bottom-right cell of the maze.\nGets the relative direction from one cell to another.\nGets the top-left cell of the maze.\nGets the top-right cell of the maze.\nCalls <code>U::from(self)</code>.\nConverts a maze grid cell to world coordinates.\nSpecial positions and cell finding utilities.\nCoordinate system transformations between different …\nConverts a position in the maze wall grid to a position in …\nConverts 3D world coordinates to a maze grid cell.\nConverts a yaw angle (in degrees) to a cardinal direction.\nStandard height of the player in the world\nGet the floor size based on test mode In test mode, the …\nEnum representing cardinal directions in the maze\nTranslates a direction into a yaw angle.\nGets the cell adjacent to the given cell in the specified …\nGets the bottom-left cell of the maze.\nGets the bottom-right cell of the maze.\nGets the relative direction from one cell to another.\nGets the top-left cell of the maze.\nGets the top-right cell of the maze.\nConverts a yaw angle (in degrees) to a cardinal direction.\nCalculates the size of a single cell in world units.\nCalculates the world coordinates of the bottom-left cell …\nConverts a maze grid cell to world coordinates.\nConverts a position in the maze wall grid to a position in …\nConverts 3D world coordinates to a maze grid cell.\nA 4x4 matrix with memory layout compatible for GPU buffers.\nReturns the argument unchanged.\nConstructs an identity matrix.\nCalls <code>U::from(self)</code>.\nComputes the inverse of an affine transformation matrix.\nMultiplies two matrices (self * b).\nConstructs an orthographic projection matrix.\nConstructs a perspective projection matrix.\nConstructs a rotation matrix around the X axis.\nConstructs a rotation matrix around the Y axis.\nConstructs a rotation matrix around the Z axis.\nConstructs a scaling matrix.\nConstructs a translation matrix.\nA 3D vector with memory layout compatible for GPU buffers.\nReturns a reference to the vector’s components as an …\nComputes the cross product of two vectors.\nComputes the dot product of two vectors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate Vec3 from 2D vector with specified Y component\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the Euclidean length (magnitude) of the vector.\nCreates a new <code>Vec3</code> from components.\nNormalizes the vector to unit length.\nConvert to 2D vector (ignoring Y component)\nReturns the x component of the vector.\nReturns the y component of the vector.\nReturns the z component of the vector.\nWGPU Pipeline Builder Utilities\nUniform buffer utilities for wgpu rendering.\nUser interface module.\nWGPU-based renderer for the Mirador game.\nMain renderer for the 3D maze game.\nDebug rendering utilities for visualizing collision …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAnimated starfield background renderer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFor debugging - get current compass angle in degrees\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNormalize angle to [-π, π]\nSet smoothing factor (0.0 = very smooth, 1.0 = instant)\nCalculate shortest angular difference between two angles\nCalculate which needle image to show based on player and …\nAlternative update with configurable smoothing\nUpdates the compass to point toward the exit from the …\nUpdate compass position and size\nMaterial ID for debug bounding boxes\nCollects all wall face AABB debug vertices from the BVH …\nHelper function to recursively collect wall face AABBs …\nGenerates vertices for rendering an AABB as a solid …\nWhether to render bounding boxes for debugging.\nVertex buffer for the debug renderer\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current rotation angle (in radians)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender the enemy\nSet smoothing factor for rotation (0.0 = very smooth, 1.0 …\nUpdate enemy position and rotation to face player\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new game over renderer.\nRender the game over overlay to the current render pass.\nUpdate the animation time for the game over overlay.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a single star in the starfield.\nHandles GPU resources and rendering pipeline for the …\nUniform buffer for background color (RGBA).\nBrightness multiplier (0.0 = dim, 1.0 = bright).\nCreates the render pipeline and uniform bind group for the …\nCreates a <code>StarRenderer</code> with randomly generated stars and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex buffer for drawing star quads as triangles.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of indices to draw.\nRender pipeline for the starfield.\n2D position in screen space, range [-1.0, 1.0].\nSize of the star (radius in NDC units).\nUniform buffer for animation time.\nBind group for uniforms.\nUpdates the background color used by the starfield shader.\nUpdates the animation time uniform for the starfield …\nVertex buffer containing star quad vertices.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilder for creating bind group layouts with common …\nBuilder for creating render pipelines with common patterns …\nBuild the render pipeline with the configured parameters.\nBuild the bind group layout.\nCreate a vertex buffer containing a fullscreen quad.\nHelper for creating uniform buffers\nCreate a vertex buffer layout for 2D positions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new pipeline builder with default settings.\nCreate a new bind group layout builder.\nEnable standard alpha blending.\nAdd a bind group layout to the pipeline.\nSet a custom blend state for color blending.\nSet depth and stencil testing configuration.\nSet the fragment shader entry point function name.\nSet the pipeline label for debugging purposes.\nSet the bind group layout label for debugging.\nDisable face culling.\nAdd a filtering sampler binding.\nSet the shader source code (WGSL format).\nAdd a 2D texture binding.\nAdd a uniform buffer binding.\nAdd a vertex buffer layout to the pipeline.\nSet the vertex shader entry point function name.\nUniforms for the main render pipeline.\nVertex data for rendering maze and floor geometry.\nRGBA color (normalized 0-255).\nCreates a green exit patch at an arbitrary world position …\nGenerates vertices for a large square floor centered at …\nGenerates wall geometry for a maze grid.\nCreates a wall quad facing the X direction (parallel to Z …\nCreates a wall quad facing the Z direction (parallel to X …\nReturns the vertex buffer layout for use in a wgpu …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaterial type (0 = floor, 1 = wall).\n3D position in world space.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new text buffer with the given ID, text, style, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandle game over text auto-sizing and positioning (similar …\nHandle score and level text auto-sizing and positioning …\nHide the game over display\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if game over display is currently visible\nLoad a font from a file path and register it with a name\nShow the game over display\nUpdate game over display for different screen sizes (call …\nUpdate the position of an existing buffer\nUpdate the style of an existing buffer\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandles the title screen rendering and animation logic.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRender the title\nUpdate the title renderer with the current view projection …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nApplies all owned upgrades to the player and game state, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMain WGPU renderer for the Mirador game.\nClean up GPU resources before dropping the renderer This …\nThe WGPU device for resource creation.\nReturns the argument unchanged.\nRenderer for the game over screen.\nMain render pipeline for the maze and floor.\nCalls <code>U::from(self)</code>.\nRenderer for the loading screen maze and loading bar.\nInitializes a new <code>WgpuRenderer</code> and all associated GPU …\nThe WGPU queue for submitting commands.\nRenders the title screen.\nThe WGPU surface for presenting rendered frames.\nThe surface configuration (format, size, etc.).\nRenderer for the title screen.\nRenders the current frame to the surface.\nTest maze dimensions (smaller than normal maze)\nCreates a locked enemy positioned further from the exit\nCreates a test maze grid with only perimeter walls\nCreates a test timer configuration with frozen time\nGets the center cell of the test maze for the exit\nReturns the world coordinates of the center of the room …\nConverts maze cell to wall grid coordinates for exit …\nPlaces the exit marker in the maze grid\nSets up the test environment")