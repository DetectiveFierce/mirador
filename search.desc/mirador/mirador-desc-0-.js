searchState.loadedDescShard("mirador", 0, "Mirador - A 3D Maze Runner Game\nApplication module for Mirador.\nAssets Module\nMacro for easy timing of code blocks\nBenchmarking and Performance Analysis Library\nMacro for conditional benchmarking (only in debug builds)\nGame state management module.\nMain entry point for the Mirador game application.\nMath utilities and types for 3D graphics and game logic.\nMain renderer module.\nAsynchronously runs the main game loop.\nTest mode functionality for Mirador.\nAppState module for Mirador.\nEvent handler module for Mirador.\nUpdate logic for Mirador App.\nHolds all state required for a running Mirador game …\nThe total elapsed time since the game started.\nFrame rate counter for monitoring rendering performance\nReturns the argument unchanged.\nThe main game state (player, timing, maze, etc.).\nUpdates the title screen maze and loading bar, and uploads …\nCalls <code>U::from(self)</code>.\nThe current input state (pressed keys, etc.).\nAsynchronously creates a new <code>AppState</code> with initialized …\nThe pause menu UI component.\nPerformance profiler for benchmarking\nResizes the WGPU surface and updates the configuration.\nThe timestamp when the game started.\nThe text renderer for all game UI text elements.\nHandles mouse capture and cursor visibility based on game …\nUpdates all game UI elements including timer, level, and …\nThe upgrade menu UI component.\nThe WGPU renderer for the main game and background.\nMain application struct that manages the game lifecycle …\nHandles device events, primarily mouse movement for camera …\nReturns the argument unchanged.\nUpdates frame timing and performance metrics.\nHandles procedural maze generation and loading screen …\nHandles the main rendering loop and game state updates.\nHandles window resize events and updates all rendering …\nThe WGPU instance for graphics operations.\nCalls <code>U::from(self)</code>.\nCreates a new <code>App</code> instance with default WGPU configuration.\nInitializes a new level or restarts the game.\nHandles application resume events by creating a new window.\nSaves benchmark results to file when the application is …\nAsynchronously sets up the application window and …\nThe current application state, None until initialized.\nThe application window, None until set.\nHandles window events including input, resize, and close …\nBeeper rise sound effect data\nLevel complete sound effect data\nJeffree Star ASMR sound effect data\nMenu select sound effect data\nSingle step sound effect data\nSlime track sound effect data\nUpgrade sound effect data\nWall hit sound effect data\nBlank icon image data\nCompass base image data\nDash ability icon image data\nFrankie character image data\nGold compass image data\nHanken Grotesk Bold font data\nHanken Grotesk Medium font data\nHanken Grotesk Regular font data\nHead start ability icon image data\nJeffree character image data\nMaze icon image data\nMain game music track data\nStripped main game music track data\nCompass needle position 0 image data\nCompass needle position 1 image data\nCompass needle position 10 image data\nCompass needle position 11 image data\nCompass needle position 2 image data\nCompass needle position 3 image data\nCompass needle position 4 image data\nCompass needle position 5 image data\nCompass needle position 6 image data\nCompass needle position 7 image data\nCompass needle position 8 image data\nCompass needle position 9 image data\nSilent step ability icon image data\nSlime enemy image data\nSlower seconds ability icon image data\nSpeed up ability icon image data\nTall boots ability icon image data\nTiles texture image data\nGame title image data\nUnknown ability icon image data\nReturns all compass needle textures in order\nReturns all font data with their names\nReturns all icon textures with their IDs\nConfiguration for benchmarking features\nData structures and types for storing benchmark …\nWhether benchmarking is enabled\nUtilities for formatting and displaying benchmark results\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMaximum number of samples to keep in memory\nMinimum duration to log (filters out very fast operations)\nWhether to print results to console\nUtility functions and helper types for benchmarking …\nWhether to write results to file\nCentralized benchmark data storage\nCentral storage for all benchmark measurements\nFrame rate counter for monitoring rendering performance\nMemory usage tracker\nPerformance metrics for a specific operation\nPerformance profiler for identifying hot paths\nAverage duration across all measurements\nClears all recorded measurements\nNumber of times this operation was measured\nEnds timing a section\nVector storing the duration of each recorded frame\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the current memory usage in bytes\nGets the current average FPS\nReturns FPS statistics as (min_fps, avg_fps, max_fps)\nGets the maximum frame time (best performance)\nReturns a copy of all recorded measurements\nGets the memory usage difference since initial recording\nGets the minimum frame time (worst performance)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTimestamp of the last recorded frame\nLongest duration recorded for this operation\nMaximum number of frame time samples to keep in memory\nShortest duration recorded for this operation\nCreates a new frame rate counter\nCreates a new memory tracker\nCreates a new profiler\nRecords a frame and returns the current FPS\nRecords a frame and returns the current FPS\nRecords the initial memory usage\nRecords a new measurement for the specified operation\nStarts timing a section\nTimes a closure execution\nTotal duration of all measurements combined\nHelper function to calculate column widths for benchmark …\nA scoped timer that automatically stops when dropped\nA timer for measuring execution time of code sections\nClears measurements and optionally writes them to file …\nClears all recorded measurements\nConfiguration for this timer\nForces a save of benchmark results regardless of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets FPS statistics (min, average, max)\nGets the current number of measurements\nGets all recorded measurements\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the operation being timed\nCreates a new timer with the given name\nCreates a new scoped timer\nPrints a summary of all recorded measurements\nRecords a frame for FPS tracking\nCreates a scoped timer with default configuration\nWhen the timer was started\nStops the timer and records the measurement\nTimes a closure execution with default configuration\nThe underlying timer\nWrites benchmark results to a file in the …\nWrites benchmark results to file with default source …\nPause menu is hidden, game continues normally\nRepresents the different screens or states the game can be …\nVictory screen shown when the player successfully reaches …\nMain gameplay screen where the player navigates the maze\nScreen displayed when the player fails (e.g., time runs …\nRepresents the entire mutable state of the game.\nInternal timer implementation that handles countdown logic …\nManages all game UI elements including timers, scores, and …\nTemporary screen shown while loading game assets or …\nScreen for starting a new game, possibly with difficulty …\nPause menu is currently visible and active\nOverlay screen shown when the game is paused, with …\nRepresents the current state of the pause menu.\nConfiguration settings for game timers.\nInitial screen shown when the game starts, typically with …\nScreen for selecting or purchasing player upgrades between …\nGame Audio Manager\nCentralized audio management system.\nFlag to ensure the beeper rise sound effect is only played …\nWhether mouse input is captured for camera movement.\nSpatial partitioning and collision detection system for 3D …\nSystem responsible for detecting and resolving collisions …\nConfiguration defining duration, thresholds, and colors.\nColor used when time is almost expired (below critical …\nTime remaining when the timer should switch to critical …\nCurrent frames per second, updated periodically.\nThe currently active screen or game mode.\nReturns a new <code>GameState</code> with default values.\nCreates a new GameUIManager with default values.\nCreates a default timer configuration with reasonable …\nTime elapsed since the last frame in seconds.\nTotal duration of the timer countdown.\nTotal time that has been spent in paused state.\nEnemy AI system for the Mirador game.\nThe enemy entity in the game world.\nThe specific maze cell that serves as the exit point.\nWhether the player has reached the maze exit.\nTimer tracking upward movement animation when exit is …\nFormats the remaining time as a string for display.\nTotal number of frames rendered since the game started.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nManager for all game UI elements including timers, scores, …\nDetermines the appropriate color for the timer display …\nGets the current game level.\nGets the formatted level text for display.\nCalculates and returns the time remaining on the timer.\nGets the current game score.\nGets the formatted score text for display.\nGets the current color of the timer based on its state.\nGets the formatted timer text for display.\nSets up the timer, score, and level display using the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the timer has expired (reached zero).\nWhether the timer has reached zero.\nChecks whether the game timer has expired (reached zero).\nWhether the timer is currently counting down.\nFlag indicating whether the game is running in test mode.\nChecks if the timer has expired (reached zero).\nKeyboard and mouse input handling for the game.\nTimestamp of the last FPS calculation update.\nTimestamp of the previous frame, used for delta time …\nThe current game level (typically starts at 1).\nMaze Generation, Encoding, and Animation module.\nFile system path to the currently loaded maze definition.\nCreates a new <code>GameState</code> with initialized default values.\nCreates a new GameUIManager with initial values.\nCreates a new timer with the specified configuration.\nColor used when plenty of time remains (above warning …\nPauses the timer if it’s currently running.\nPauses the timer if it is currently running.\nIf paused, the moment when pause was activated.\nPlayer state and movement logic.\nThe player character containing position, orientation, …\nThe screen that was active before entering the current …\nResets the timer to its initial state without starting it.\nResets the game timer to its initial configured duration …\nResets the game timer to its initial configured duration …\nResumes the timer from a paused state.\nResumes the timer if it is currently paused.\nThe current game score.\nUpdates the current game level.\nSets the current game level.\nUpdates the current game score.\nSets the current game score.\nStarts or restarts the timer countdown.\nStarts the game timer with optional custom configuration.\nThe moment when the timer was started (or last restarted).\nCreates and starts a new game timer with the specified …\nStops the timer immediately.\nStops the currently running game timer.\nStops the currently running timer.\nThe currently active game timer, if any.\nUpdates the timer state and checks for expiration.\nCall this every frame to update the timer, score, and …\nHelper to update the text content of a buffer and re-apply …\nUpdates the timer countdown and returns whether the timer …\nUpgrade system for the Mirador game.\nColor used when time is getting low (between warning and …\nTime remaining when the timer should switch to warning …\nThe main audio manager for game audio systems.\nNo movement - footstep audio is stopped\nRepresents the different movement states for footstep …\nFast movement - footsteps loop every 0.25 seconds\nNormal walking pace - footsteps loop every 0.5 seconds\nCore Kira audio manager instance\nAudio data for background music track\nHandle for the currently playing background music Used for …\nAudio data for beeper rise sound effect Made public for …\nPlays the level completion sound effect.\nAudio data for level/objective completion sound\nPre-loaded audio data for enemy sounds Typically a looping …\nMap of enemy IDs to their corresponding audio handles …\nPre-loaded audio data for footstep sounds Single step …\nCurrent footstep sound handle, if playing Managed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the number of currently active enemies with spatial …\nGets the current movement state.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the player is currently moving (walking or …\nChecks if the player is currently in sprinting state.\nChecks if the player is currently in walking state.\nTimestamp of the last wall hit sound Used with cooldown to …\nAudio listener handle for spatial audio calculations The …\nCurrent movement state for footstep management\nCreates a new <code>GameAudioManager</code> instance with all audio …\nTemporarily pauses an enemy’s audio.\nPlays the beeper-rise sound effect.\nPlays the UI selection sound effect.\nPlays the upgrade/power-up sound effect.\nPlays audio data with a specified volume level.\nRemoves an enemy and stops all associated audio.\nRestarts the background music from the beginning.\nResumes a previously paused enemy’s audio.\nAudio data for UI selection/menu sounds\nResets all audio volumes to normal gameplay levels.\nUpdates the 3D position of the audio listener.\nInternal method to change movement state and manage …\nAdjusts audio volumes for the pause menu.\nAdjusts audio volumes for the title screen presentation.\nMap of enemy IDs to their spatial audio tracks Each track …\nSpawns a new enemy with spatial audio at the specified …\nStarts or restarts the background music track.\nStarts sprinting footstep audio.\nStarts walking footstep audio.\nStops all movement-related audio.\nLegacy method for backward compatibility.\nUpdates the audio manager state.\nUpdates the 3D position of an existing enemy’s audio.\nAudio data for upgrade/power-up sounds\nPlays the wall collision sound effect with cooldown …\nMinimum time between wall hit sound effects Prevents audio …\nAudio data for wall collision sound effects\nAxis-Aligned Bounding Box (AABB) for efficient collision …\nBounding Volume Hierarchy for efficient spatial …\nA node in the Bounding Volume Hierarchy tree structure.\nHigh-level collision detection and response system.\nInternal node with two children.\nLeaf node containing wall faces.\nRepresents a single wall face for collision detection.\nGets a reference to the AABB of this node.\nBounding box for this face.\nBuilds the BVH from a collection of wall faces.\nBuilds the collision BVH from maze geometry.\nRecursively builds the BVH tree structure.\nThe bounding volume hierarchy for spatial partitioning of …\nCalculates the normal vector for the wall face.\nCalculates the center point of the AABB.\nChecks for collisions and resolves them with realistic …\nThe four corners of the wall face.\nCreates an X-facing wall face (perpendicular to X axis).\nCreates a Z-facing wall face (perpendicular to Z axis).\nTests cylinder intersection when the path is parallel to …\nTests if a swept cylinder intersects with any geometry in …\nPerforms cylinder-wall face intersection test.\nCalculates the signed distance from a point to a wall face.\nEvaluates the cost of a potential split.\nExpands this AABB to fully contain another AABB.\nExtracts wall faces from the maze grid for collision …\nFinds the best axis and position to split the faces.\nAttempts to find a safe position when the player is stuck.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an AABB from a wall face defined by its four …\nChecks if this AABB intersects with another AABB.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetects if the player is stuck between opposing wall faces.\nThe maximum corner of the bounding box as [x, y, z] …\nThe dimensions of the maze grid (width, height).\nThe minimum corner of the bounding box as [x, y, z] …\nCreates a new AABB from minimum and maximum corner points.\nCreates a new wall face from four corners.\nCreates a new empty Bounding Volume Hierarchy.\nCreates a new collision system with specified player …\nThe face normal vector.\nThe height of the player’s collision cylinder.\nThe radius of the player’s collision cylinder.\nChecks if a point (expanded by radius) intersects with …\nQueries the BVH for potential collisions with a player …\nRecursively queries the BVH tree for potential collisions.\nResolves collision with a single wall using vector …\nThe root node of the BVH tree.\nCalculates the surface area of the AABB.\nThe bounding box that contains all faces in this leaf.\nThe bounding box that contains both children.\nThe wall faces contained in this leaf node.\nThe left child node.\nThe right child node.\nRepresents an enemy entity in the game with AI-driven …\nAdvanced pathfinding system for enemy movement and …\nCurrent aggression level (matches game level)\nDistance threshold for considering target reached (scales …\nBase arrival threshold (before level scaling)\nBase path radius (before level scaling)\nBase pursuit distance (before level scaling)\nBase rotation step (before level scaling)\nBase movement speed in units per second (before level …\nCalculates a new target point with level-based aggression.\nCurrent movement speed after level-based scaling\nCurrent target position the enemy is moving toward\nGets the distance to the current target.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns current aggression statistics for debugging …\nGets the current movement direction toward the target.\nCheck if the enemy has reached its current target.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEnhanced path safety checking with level-based precision.\nPrevious position for stuck detection\nWhether the enemy is locked (cannot move)\nDetermines if the enemy needs a new target with …\nCreates a new enemy at the specified position with the …\nCreates a new pathfinder at the specified position with …\nCurrent path radius (scales with level)\nThe pathfinding system that controls enemy movement\nPlaces an enemy strategically with level-based positioning.\nConvenience function for level-aware standard enemy …\nCurrent 3D position of the enemy <code>[x, y, z]</code>\nDistance at which enemy starts pursuing more aggressively …\nWhether the enemy has reached the player\nCurrent rotation step for pathfinding (scales with level)\nScales enemy aggression parameters based on the current …\nUpdates the enemy’s position (call this when the enemy …\nThe visual size of the enemy sprite in pixels\nCounter for stuck detection\nUpdates the enemy’s behavior and position based on the …\nMain pathfinding update function with level awareness.\nUpdates aggression parameters based on the current game …\nUpdates stuck detection with level-based sensitivity.\nValidates and adjusts enemy position to ensure it doesn’…\nEscape key (toggle mouse capture).\nEnum representing all possible in-game actions that can be …\nJump (Space).\nTracks the set of currently pressed game keys.\nLeft mouse button.\nRight mouse button.\nMove player backward (S or Down Arrow).\nMove player forward (W or Up Arrow).\nMove player left (A or Left Arrow).\nMove player right (D or Right Arrow).\nQuit the game (`).\nSave Benchmark Results (F5).\nSprint (Shift).\nToggle Bounding Boxes (B).\nToggle UI sliders (C).\nToggle Upgrade Menu (U).\nClears all pressed keys from the key state.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if a key is currently pressed.\nCreates a new, empty <code>KeyState</code>\nMarks a key as pressed.\nSet of currently pressed keys.\nMarks a key as released.\nUpdates the <code>GameState</code> based on the current pressed keys.\nConverts a winit <code>keyboard::Key</code> to a <code>GameKey</code> if it matches …\nMaze generation using Kruskal’s algorithm with …\nParses a maze file into a 2D vector of wall booleans and …\nRepresents a cell in the maze grid\nRepresents an edge between two cells in the maze\nRepresents a maze with walls and passages\nMaze generator using Kruskal’s algorithm\nUnion-Find data structure for Kruskal’s algorithm\nFirst cell connected by the edge\nSecond cell connected by the edge\nColumn index of the cell\nSet of cells currently connected in the maze\nExit cell of the maze (if set)\nWhether we’re in fast mode\nNumber of edges remaining when we switch to fast mode\nFinds the root of the set containing the given cell\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndicates if generation is complete\nReturns the dimensions of the rendered maze in pixels\nGet the actual maze dimensions (number of cells, not wall …\nReturns the current progress of generation (processed …\nReturns the generation progress as a ratio (0.0 to 1.0)\nGenerates pixel data for rendering the maze\nHeight of the maze in cells\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if maze generation is complete\nCheck if a position is walkable (not a wall) This method …\nAlternative method: check if a position is a wall\nAdds a new cell to the UnionFind structure\nThe maze being generated (wrapped in Arc for thread safety)\nCreates a new UnionFind structure\nCreates a new maze generator with the given dimensions …\nCreates a new Cell with the given coordinates\nCreates a new Edge between two cells\nCreates a new maze with all walls present\nNumber of edges processed during generation\nRow index of the cell\nSaves the current maze to a timestamped file in the …\nSets a random cell as the exit\nPerforms one step of maze generation Returns true if a …\nTotal number of edges in the maze\nUnions two sets containing cell1 and cell2 Returns true if …\n2D vector representing walls (true) and passages (false)\nWidth of the maze in cells\nRepresents the player character’s state in the world.\nBase movement speed in units per second.\nThe maze cell the player is currently occupying.\nField of view in degrees for perspective projection.\nReturns the argument unchanged.\nComputes the view matrix for the player’s current …\nComputes the combined view-projection matrix for rendering.\nCalls <code>U::from(self)</code>.\nTime accumulator for stamina regeneration cooldown.\nMaximum stamina capacity.\nUpdates the player’s orientation based on mouse movement.\nMouse sensitivity multiplier for camera control.\nMoves the player backward based on current yaw and speed.\nMoves the player downward in the Y direction.\nMoves the player forward based on current yaw and speed.\nMoves the player left (strafe) based on current yaw and …\nMoves the player right (strafe) based on current yaw and …\nMoves the player upward in the Y direction.\nEnhanced movement with collision detection and resolution.\nCreates a new <code>Player</code> with default starting position and …\nPitch angle in degrees for vertical camera control.\nPlayer’s world position in 3D space <code>[x, y, z]</code>.\nSpawns the player at the bottom-left cell of the maze.\nCurrent movement speed in units per second.\nCurrent stamina value (0.0 to max_stamina).\nReturns the current stamina as a ratio from 0.0 to 1.0.\nSeconds to wait before stamina regeneration starts.\nStamina points regenerated per second.\nUpdates the player’s current maze cell based on their …\nUpdates the player’s stamina based on sprinting state …\nYaw angle in degrees for horizontal camera control.\nEnum representing all available upgrades in the game.\nCommon upgrades (40% chance)\nIncreases maximum stamina for longer sprinting\nEpic upgrades (8% chance)\nPrevents enemy movement at level start\nLegendary upgrades (2% chance)\nRare upgrades (20% chance)\nReduces noise made while moving\nMakes time pass slower, giving more time to navigate\nIncreases player movement speed\nMakes the player taller to see over walls\nUncommon upgrades (30% chance)\nA mysterious upgrade with unknown effects\nRepresents a single upgrade that can be applied to the …\nManages the player’s upgrades and provides functionality …\nDefines the rarity levels for upgrades and their …\nApplies an upgrade to the player, incrementing its count.\nFinds the corresponding <code>AvailableUpgrade</code> for a given …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the number of times the player has collected a …\nReturns display information for an upgrade, including …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe display name of the upgrade\nCreates a new <code>UpgradeManager</code> with no upgrades collected.\nMaps each upgrade type to the number of times the player …\nThe rarity level of the upgrade, affecting selection …\nSelects a specified number of random upgrades for the …\nConverts this upgrade variant into a full <code>Upgrade</code> struct.\nA description of what the upgrade does\nReturns the weight value for this rarity level.\nCoordinate system transformations for the maze.\nConverts degrees to radians.\n4x4 matrix type and operations for 3D graphics …\nConverts radians to degrees.\n3D vector type and operations for graphics and math.\nEnum representing cardinal directions in the maze\nEast direction (90°)\nNorth direction (0°)\nSouth direction (180°)\nWest direction (270°)\nCalculates the size of a single cell in world units.\nConstants for special positions in the maze\nTranslates a direction into a yaw angle.\nReturns the argument unchanged.\nGets the cell adjacent to the given cell in the specified …\nGets the bottom-left cell of the maze.\nCalculates the world coordinates of the bottom-left cell …\nGets the bottom-right cell of the maze.\nGets the relative direction from one cell to another.\nGets the top-left cell of the maze.\nGets the top-right cell of the maze.\nCalls <code>U::from(self)</code>.\nConverts a maze grid cell to world coordinates.\nSpecial positions and cell finding utilities.\nCoordinate system transformations between different …\nConverts a position in the maze wall grid to a position in …\nConverts 3D world coordinates to a maze grid cell.\nConverts a yaw angle (in degrees) to a cardinal direction.\nStandard height of the player in the world\nGet the floor size based on test mode In test mode, the …\nEnum representing cardinal directions in the maze\nEast direction (90°)\nNorth direction (0°)\nSouth direction (180°)\nWest direction (270°)\nTranslates a direction into a yaw angle.\nGets the cell adjacent to the given cell in the specified …\nGets the bottom-left cell of the maze.\nGets the bottom-right cell of the maze.\nGets the relative direction from one cell to another.\nGets the top-left cell of the maze.\nGets the top-right cell of the maze.\nConverts a yaw angle (in degrees) to a cardinal direction.\nCalculates the size of a single cell in world units.\nCalculates the world coordinates of the bottom-left cell …\nConverts a maze grid cell to world coordinates.\nConverts a position in the maze wall grid to a position in …\nConverts 3D world coordinates to a maze grid cell.\nA 4x4 matrix with memory layout compatible for GPU buffers.\nReturns the argument unchanged.\nConstructs an identity matrix.\nCalls <code>U::from(self)</code>.\nComputes the inverse of an affine transformation matrix.\nMultiplies two matrices (self * b).\nConstructs an orthographic projection matrix.\nConstructs a perspective projection matrix.\nConstructs a rotation matrix around the X axis.\nConstructs a rotation matrix around the Y axis.\nConstructs a rotation matrix around the Z axis.\nConstructs a scaling matrix.\nConstructs a translation matrix.\nA 2D vector for 2D mathematical operations.\nA 3D vector with memory layout compatible for GPU buffers.\nReturns a reference to the vector’s components as an …\nComputes the cross product of two vectors.\nCalculates the Euclidean distance between this vector and …\nCalculates the Euclidean distance between this vector and …\nComputes the dot product of two vectors.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate Vec3 from 2D vector with specified Y component\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nComputes the Euclidean length (magnitude) of the vector.\nCalculates the length (magnitude) of the vector.\nCreates a new <code>Vec3</code> from components.\nCreates a new 2D vector with the given x and z components.\nNormalizes the vector to unit length.\nNormalizes the vector to unit length.\nRotates the vector by the specified angle in radians.\nConvert to 2D vector (ignoring Y component)\nReturns the x component of the vector.\nReturns the x component of the vector.\nReturns the y component of the vector.\nReturns the z component of the vector.\nReturns the z component of the vector.\nGame-specific rendering components and systems. Game …\nIcon rendering and management.\nLoading screen rendering components.\nPipeline building utilities for WGPU.\nBasic geometric primitives for rendering. Uniform buffer …\nRectangle rendering utilities.\nText rendering system.\nTitle screen rendering components.\nUser interface rendering components. User interface module.\nCore WGPU library and utilities. WGPU-based renderer for …\nMain renderer for the 3D maze game.\nBind group for ceiling texture resources\nSampler for ceiling texture filtering\nOptional texture for ceiling rendering\nTexture view for ceiling rendering\nCompass rendering system for directional navigation.\nRenders the directional compass overlay\nDebug rendering utilities for visualizing collision …\nDevelopment tools for rendering bounding boxes and debug …\nOptional depth buffer for proper 3D occlusion (recreated …\nEnemy rendering module for the Mirador game.\nHandles enemy visualization and animation\nOptional coordinates of the maze exit for special rendering\nReturns the argument unchanged.\nGame over overlay rendering system.\nCalls <code>U::from(self)</code>.\nLoads the ceiling texture and creates the bind group for …\nCreates a new <code>GameRenderer</code> instance with all necessary GPU …\nMain render pipeline for maze geometry with depth testing …\nRenders the complete game scene including maze, enemies, …\nStamina Bar Renderer Module\nDisplays player stamina levels\nBackground renderer for animated starfield effects\nAnimated starfield background renderer.\nTracks animation start time for time-based effects\nTimer Bar Renderer Module\nRenders the time remaining indicator\nWebGPU bind group linking uniform buffer to shader binding …\nGPU buffer storing model-view-projection matrix for vertex …\nUpdates or creates the depth texture for proper 3D …\nCombined vertex buffer containing both floor and wall …\nTotal number of vertices to render from the combined buffer\nCompass renderer for directional navigation overlay.\nUniform data for compass positioning and sizing.\nPadding for GPU memory alignment requirements.\nBind group for the compass base texture.\nCompass size as fraction of screen dimensions. Values of …\nCurrent needle sprite index (0-11).\nReturns the argument unchanged.\nReturns the argument unchanged.\nFor debugging - get current compass angle in degrees\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBind groups for each needle direction texture.\nCreates a new <code>CompassRenderer</code> instance and initializes all …\nNormalize angle to [-π, π]\nWGPU render pipeline for compass rendering.\nRenders the compass overlay to the current render pass.\nScreen position in normalized coordinates (0.0 to 1.0). …\nSet smoothing factor (0.0 = very smooth, 1.0 = instant)\nCalculate shortest angular difference between two angles\nCurrent smoothed compass angle in radians.\nSmoothing factor for compass movement (0.01 to 1.0).\nUniform buffer for compass position and size data.\nCalculate which needle image to show based on player and …\nAlternative update with configurable smoothing\nUpdates the compass to point toward the exit from the …\nUpdates the compass position and size on screen.\nVertex buffer containing compass quad geometry.\nMaterial ID for debug bounding boxes.\nDebug renderer for visualizing collision system internals.\nCollects all wall face AABB debug vertices from the BVH …\nHelper function to recursively collect wall face AABBs …\nGenerates vertices for rendering an AABB as a solid …\nWhether to render bounding boxes for debugging.\nVertex buffer for the debug renderer.\nNumber of vertices in the debug vertex buffer.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUpdates the debug vertex buffer with current collision …\nRenders enemy entities as billboard sprites that face the …\nUniform data structure for enemy rendering shader.\nPadding for proper memory alignment\nBind group containing uniforms, texture, and sampler\nCreates vertex buffer containing billboard quad vertices.\nCurrent position of the enemy in world space (x, y, z)\nSize/scale of the enemy sprite\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the current rotation angle of the enemy.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads the slime texture from the assets directory.\nCreates a new enemy renderer for the specified enemy.\nThe render pipeline for enemy rendering\nCurrent position of the player in world space (x, y, z)\nRenders the enemy to the specified render pass.\nSets the smoothing factor for rotation interpolation.\nCurrent smoothed rotation angle in radians\nSmoothing factor for rotation interpolation (0.0 = very …\nUniform buffer containing shader uniforms\nUpdates enemy position and rotation to face the player.\nVertex buffer containing billboard quad vertices\nView-projection matrix for transforming vertices to screen …\nGame over overlay renderer for end-game visual effects.\nUniform data for game over animation timing.\nPadding for GPU memory alignment requirements.\nBind group for uniform data binding.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new game over renderer.\nWGPU render pipeline for game over overlay.\nRender the game over overlay to the current render pass.\nAnimation time in seconds.\nUniform buffer for animation timing data.\nUpdate the animation time for the game over overlay.\nVertex buffer containing fullscreen quad geometry.\nGPU-accelerated stamina bar renderer.\nUniform data structure passed to the stamina bar shader.\nPadding to ensure proper GPU memory alignment (unused)\nBind group that associates the uniform buffer with shader …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new stamina bar renderer.\nThe WebGPU render pipeline for stamina bar rendering\nCurrent stamina progress from 0.0 (empty) to 1.0 (full)\nRenders the stamina bar to the current render pass.\nScreen resolution as [width, height] for proper aspect …\nCreation timestamp for calculating elapsed time\nElapsed time in seconds since renderer creation, used for …\nGPU buffer containing uniform data (progress, time, …\nUpdates the stamina bar’s uniform data on the GPU.\nRepresents a single star in the starfield.\nHandles GPU resources and rendering pipeline for the …\nUniform buffer for background color (RGBA).\nBrightness multiplier (0.0 = dim, 1.0 = bright).\nCreates the render pipeline and uniform bind group for the …\nCreates a <code>StarRenderer</code> with randomly generated stars and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex buffer for drawing star quads as triangles.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of indices to draw.\nRender pipeline for the starfield.\n2D position in screen space, range [-1.0, 1.0].\nSize of the star (radius in NDC units).\nUniform buffer for animation time.\nBind group for uniforms.\nUpdates the background color used by the starfield shader.\nUpdates the animation time uniform for the starfield …\nVertex buffer containing star quad vertices.\nGPU-accelerated timer bar renderer.\nUniform buffer data structure for the timer bar shader.\nPadding to ensure proper GPU memory alignment (16-byte …\nBind group that associates the uniform buffer with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new timer bar renderer.\nThe GPU render pipeline configured for timer bar rendering\nProgress value from 0.0 to 1.0 representing the completion …\nRenders the timer bar to the current render pass.\nScreen resolution as [width, height] in pixels for proper …\nStart time for calculating elapsed time in animations\nCurrent time in seconds since the timer started, used for …\nGPU buffer containing the uniform data (TimerBarUniforms)\nUpdates the uniform buffer with new timer bar parameters.\nRepresents a 2D icon with position, size, and texture …\nHigh-performance batch renderer for 2D icons using WGPU.\nVertex data structure for rendering icon quads.\nAdds an icon to the render queue.\nLayout descriptor for texture and sampler bind groups\nNumber of icons for each texture in the cached buffers\nCached index buffers per texture to avoid recreation\nCached vertex buffers per texture to avoid recreation\nRemoves all icons from the render queue and clears cached …\nReturns the vertex buffer layout descriptor for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeight in screen coordinates (pixels)\nCollection of icons to be rendered\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads a texture from a file path and creates associated …\nLoads a texture from embedded assets and creates …\nCreates a new IconRenderer with the specified device and …\nCreates a new icon with the specified position, size, and …\nPosition in normalized device coordinates [x, y]\nRenders all queued icons to the specified render pass.\nThe graphics pipeline used for rendering icons\nUpdates the window dimensions and invalidates cached …\nIdentifier for the texture to use when rendering this icon\nCache of loaded textures, views, and bind groups keyed by …\nTexture coordinates [u, v] where (0,0) is top-left and …\nWidth in screen coordinates (pixels)\nCurrent window height in pixels (used for coordinate …\nCurrent window width in pixels (used for coordinate …\nX position in screen coordinates (pixels from left edge)\nY position in screen coordinates (pixels from top edge)\nRenderer for special visual effects on the maze exit cell.\nUniform buffer data for the exit cell shader effect.\nRenderer for the animated loading progress bar.\nUniform buffer data for the animated loading bar shader.\nMain loading screen renderer that orchestrates maze …\nConfiguration helper for calculating maze rendering …\nRenderer responsible for displaying the maze texture as a …\nPadding to ensure proper GPU alignment\nPadding to ensure proper GPU alignment\nBind group containing texture and sampler resources\nBind group for accessing uniform data in shaders\nBind group for accessing uniform data in shaders\nCreates a GPU texture and associated resources for maze …\nRenders special effects on the exit cell\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe maze generator that runs in a separate thread\nGets the current maze generation progress as a ratio.\nGets the dimensions of the maze being generated.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if maze generation has completed.\nTimestamp of the last frame update for timing calculations\nRenders an animated progress bar\nThread-safe reference to the maze being generated\nHeight of the maze in logical cells\nRenders the maze texture to the screen\nWidth of the maze in logical cells\nCreates a new loading renderer with all necessary GPU …\nCreates a new maze renderer with the specified texture …\nCreates a new loading bar renderer with animated effects.\nCreates a new exit shader renderer for animating the maze …\nCreates a new maze render configuration with calculated …\nGPU render pipeline for maze rendering\nGPU render pipeline for loading bar effects\nGPU render pipeline for exit cell effects\nCurrent loading progress from 0.0 to 1.0\nRenders the complete loading screen with all visual …\nRenders the maze texture to the current render pass.\nRenders the loading bar with default positioning (top of …\nHeight of the rendered texture in pixels\nRenders the exit effect precisely positioned over a …\nWidth of the rendered texture in pixels\nRenders the loading bar with custom positioning using …\nScreen resolution [width, height] for proper scaling\nScreen resolution [width, height] for proper scaling\nStart time for calculating animation progress\nStart time for calculating animation progress\nGPU texture containing the maze visualization data\nAnimation time in seconds since creation\nAnimation time in seconds since creation\nUniform buffer containing progress and animation data\nUniform buffer containing animation timing data\nUpdates the exit cell shader effect with current animation …\nUpdates the loading bar with current progress and …\nUpdates the maze texture on the GPU with new generation …\nUpdates the loading bar’s uniform buffer with current …\nUpdates the exit shader’s uniform buffer with current …\nVertex buffer containing fullscreen quad vertices\nBuilder for creating bind group layouts with common …\nBuilder for creating render pipelines with common patterns …\nBuild the render pipeline with the configured parameters.\nBuild the bind group layout.\nCreate a vertex buffer containing a fullscreen quad.\nHelper for creating uniform buffers\nCreate a vertex buffer layout for 2D positions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new pipeline builder with default settings.\nCreate a new bind group layout builder.\nEnable standard alpha blending.\nAdd a bind group layout to the pipeline.\nSet a custom blend state for color blending.\nSet depth and stencil testing configuration.\nSet the fragment shader entry point function name.\nSet the pipeline label for debugging purposes.\nSet the bind group layout label for debugging.\nDisable face culling.\nAdd a filtering sampler binding.\nSet the shader source code (WGSL format).\nAdd a 2D texture binding.\nAdd a uniform buffer binding.\nAdd a vertex buffer layout to the pipeline.\nSet the vertex shader entry point function name.\nScale factor for ceiling texture tiling\nUniforms for the main render pipeline.\nVertex data for rendering maze and floor geometry.\nPadding bytes for 16-byte alignment requirements.\nReturns the uniform data as a byte slice.\nRGBA color (normalized 0-255).\nCreates a bind group and layout for the uniform buffer.\nCreates a WGPU buffer containing the uniform data.\nCreates ceiling vertices for the entire maze area\nCreates a green exit patch at an arbitrary world position …\nGenerates vertices for a large square floor centered at …\nGenerates wall geometry for a maze grid.\nCreates a wall quad facing the X direction (parallel to Z …\nCreates a wall quad facing the Z direction (parallel to X …\nReturns the vertex buffer layout for use in a wgpu …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaterial type (0 = floor, 1 = wall, 3 = ceiling, 4 = exit).\n4x4 transformation matrix for vertex transformations.\nCreates a new Uniforms instance with identity matrix and …\n3D position in world space.\nTexture coordinates for texturing (used for ceiling).\nCurrent time value for shader animations.\nRepresents a rectangular primitive for menu creation.\nHigh-performance rectangle renderer for menu systems.\nVertex data structure for rectangle rendering in menu …\nPadding to ensure 16-byte alignment required by GPU buffers\nAdds a rectangle to be rendered in the next draw call.\nClears all rectangles from the render queue.\nRGBA color values (0.0 to 1.0) for the rectangle Enables …\nRGBA color values (0.0 to 1.0) for the rectangle Alpha …\nCorner radius in pixels for rounded rectangles Enables …\nCorner radius in pixels for rounded rectangles Set to 0.0 …\nDefines the vertex buffer layout for the GPU pipeline.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHeight of the rectangle in screen pixels\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new rectangle renderer for menu systems.\nCreates a new rectangle with sharp corners.\nScreen position in normalized device coordinates (-1.0 to …\nOriginal rectangle dimensions in screen pixels Passed to …\nCollection of rectangles to be rendered Represents all …\nRenders all queued rectangles in a single optimized draw …\nWebGPU render pipeline configured for rectangle rendering …\nUpdates the window dimensions for coordinate …\nUV coordinates for texture mapping and distance …\nWidth of the rectangle in screen pixels\nCurrent window height in pixels Used for coordinate …\nCurrent window width in pixels Used for coordinate …\nSets the corner radius for rounded rectangles.\nX coordinate of the rectangle’s top-left corner in …\nY coordinate of the rectangle’s top-left corner in …\nA text buffer that holds rendered text with its associated …\nDefines the positioning and size constraints for text …\nThe main text rendering system that manages fonts, text …\nStatistics about the text renderer\nDefines the visual styling properties for text rendering.\nTexture atlas for storing glyph textures\nThe underlying Glyphon buffer containing shaped text\nClears all text buffers from the renderer.\nText color in RGB format\nCreates a game over display with title and restart …\nCreates a new text buffer with the specified content, …\nCreates a default text style with sensible defaults.\nCreates a default position at the origin (0,0) with no …\nThe font family name (e.g., “Arial”, “Hanken Grotesk…\nFont size in pixels\nFont system for loading and managing fonts\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a list of all text buffer IDs.\nGets the scale factor of a text buffer.\nGets the visibility of a text buffer.\nGets the current position of a text buffer.\nGets statistics about the text renderer.\nGets the current style of a text buffer.\nGets the current text content of a text buffer.\nThe underlying Glyphon renderer\nDynamically adjusts game over text sizing and positioning …\nDynamically adjusts score and level text sizing and …\nChecks if a text buffer exists.\nHides the game over display.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the game over display is currently visible.\nLine height (spacing between lines) in pixels\nLoads all embedded fonts and registers them with the font …\nList of successfully loaded custom font names\nNumber of loaded fonts\nMaximum height constraint in pixels (None = no constraint)\nMaximum width constraint in pixels (None = no constraint)\nMeasures the dimensions of text without creating a buffer.\nCreates a new text renderer instance.\nPosition and size constraints\nPrepares all visible text buffers for rendering.\nRemoves a text buffer from the renderer.\nRenders all prepared text to the current render pass.\nUpdates the viewport when the window is resized.\nScaling factor for the text (1.0 = normal size)\nSets the scale factor of a text buffer.\nSets the visibility of a text buffer.\nMakes the game over display visible.\nFont style (normal, italic, etc.)\nVisual styling properties for this text\nCache for glyph rasterization\nCollection of all text buffers indexed by unique IDs\nThe original text content (stored for re-styling)\nTotal number of text buffers\nUpdates game over display positioning for different screen …\nUpdates the position and size constraints of an existing …\nUpdates the visual style of an existing text buffer.\nUpdates the text content of an existing text buffer.\nUpdates both text content and style in a single operation.\nUpdates text content, style, and position in a single …\nValidates that all text buffers have valid configurations.\nViewport for coordinate system management\nWhether this text buffer should be rendered\nNumber of visible text buffers\nFont weight (normal, bold, etc.)\nCurrent window height\nCurrent window size for layout calculations\nCurrent window width\nX coordinate (left edge) in pixels from screen origin\nY coordinate (top edge) in pixels from screen origin\nRenderer for the title screen with texture and shader …\nUniform data for title screen rendering.\nBind group containing texture and sampler bindings.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHandles the title screen rendering and animation logic.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new TitleRenderer with initialized pipeline and …\nThe render pipeline for title screen rendering.\nRender the title\nUniform buffer for transformation data.\nUpdate the title renderer with the current view projection …\nVertex buffer containing the fullscreen quad geometry.\nView-projection matrix for title screen transformations.\nButton UI components and utilities. Button module - …\nPause menu UI components.\nUpgrade menu UI components. Upgrade Menu System\nRepresents a UI button with text, styling, and interactive …\nManages a collection of buttons and handles their …\nAdds a button to the manager and sets up its text buffers\nOrdered list of button IDs to maintain rendering order\nMap of button ID to Button instance\nOptional container rectangle for upgrade menu background\nChecks if the given point (x, y) is within the button’s …\nWhether the button can be interacted with\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a mutable reference to a button by ID\nHandles window events for button interaction\nID of the icon to display (for upgrade buttons)\nIcon renderer for upgrade button icons\nUnique identifier for the button\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if a specific button was clicked in the last input …\nID of the button that was just clicked (if any)\nPrevious mouse position for change detection optimization\nPrevious mouse press state for change detection …\nInternal ID for the level text buffer (if level text is …\nCurrent mouse cursor position\nWhether the left mouse button is currently pressed\nCreates a new ButtonManager with initialized renderers and …\nCreates a new button with the given ID and text\nPosition and size of the button\nPrepares the text renderer for rendering\nSet of buttons that were pressed during the current mouse …\nRectangle renderer for button backgrounds\nRenders all buttons and their associated elements\nResizes the button manager and its renderers to match the …\nSets the button’s visibility\nCurrent interactive state (normal, hover, pressed, …\nVisual styling configuration (colors, padding, corner …\nButton styling and theme definitions.\nThe main text displayed on the button\nInternal ID for the main text buffer\nText renderer for button text elements\nInternal ID for the tooltip text buffer (if tooltip is …\nButton type definitions and enums.\nUpdates button positions and text layout after window …\nUpdates button states based on mouse interaction and …\nUpdates icon positions for all visible upgrade buttons\nButton utility functions and extensions.\nWhether the button is visible\nCurrent window dimensions for responsive positioning\nEnables level text display for this button\nSets the button’s position and size\nSets the button’s visual style\nSets the text alignment within the button\nEnables tooltip text display for this button\nCreates a danger button style with a red color scheme.\nCreates a primary button style with a mint green color …\nCreates a warning button style with an orange color scheme.\nAnchor points for button positioning.\nPosition and dimensions of a button within its container.\nSpacing and sizing behavior for buttons.\nCurrent interaction state of a button.\nComprehensive styling configuration for button appearance.\nCenter text horizontally within the button (default)\nPosition relative to center point (default)\nState when button is disabled and cannot be activated\nHorizontal bar button with proportional width.\nState when mouse cursor is hovering over the button\nAlign text to the left edge of the button\nDefault state when button is not being interacted with\nState when button is being actively clicked/pressed\nAlign text to the right edge of the button\nTall button that fills the container height with specified …\nText alignment options for button content.\nPosition relative to top-left corner\nSquare button that wraps tightly around text content. Best …\nAnchor point that determines coordinate interpretation\nBackground color in normal state\nColor of the button border\nWidth of the button border in pixels\nCalculates the actual top-left rendering position.\nRadius of rounded corners in pixels (0.0 = square corners)\nCreates a default button style with modern, accessible …\nBackground color when button is disabled/inactive\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nButton height in pixels\nBackground color when mouse is hovering over button\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new button position with top-left anchoring.\nInternal padding as (horizontal, vertical) in pixels …\nBackground color when button is being pressed/clicked\nButton sizing and spacing behavior\nHorizontal alignment of text within the button\nText styling configuration including font, size, and color\nButton width in pixels\nSets the anchor point for position interpretation.\nX coordinate in pixels (interpretation depends on anchor)\nY coordinate in pixels (interpretation depends on anchor)\nExtension trait for color manipulation operations.\nBrightens the color by the specified factor.\nDarkens the color by the specified factor.\nCalculates DPI scaling factor based on window height.\nIncreases the saturation of the color by the specified …\nNo action has been taken\nA pause menu overlay that appears when the game is paused.\nActions that can be triggered from the pause menu\nQuit the entire application\nQuit to the main menu/lobby\nRestart the current run/game\nResume the current game\nToggle test mode on/off\nManages all the buttons in the pause menu\nCreates and configures all the buttons for the pause menu.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the last action that was triggered and resets it to …\nHandles input events for the pause menu.\nHides the pause menu and makes all buttons invisible.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the debug panel should be visible.\nReturns whether the pause menu is currently visible.\nThe last action that was triggered by the menu\nCreates a new pause menu instance.\nPrepares the pause menu for rendering by updating text …\nRecreates all button positions and styles for the current …\nRenders the pause menu to the screen.\nHandles window resize events by updating button positions …\nCreates a scaled text style based on the window height.\nShows the pause menu and makes all buttons visible.\nWhether the debug panel should be shown\nToggles the pause menu visibility.\nUpdates the test mode button text based on the current …\nWhether the pause menu is currently visible\nNo action was taken or action was reset\nPlayer selected the first upgrade option\nPlayer selected the second upgrade option\nPlayer selected the third upgrade option\nThe main upgrade menu system that handles display and …\nRepresents the possible actions that can be taken in the …\nApplies a specific upgrade by name to the player’s …\nApplies all owned upgrades to the player and game state, …\nManages all UI buttons within the upgrade menu\nPrevents content from being reinitialized after first setup\nCreates the visual layout for the upgrade menu with three …\nThe three currently available upgrade options presented to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nMaps upgrade names to their corresponding icon identifiers.\nRetrieves and resets the last action performed in the …\nHandles user input events for the upgrade menu.\nHides the upgrade menu and resets its state for the next …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the upgrade menu is currently visible.\nThe last action performed by the player (which upgrade was …\nCreates a new upgrade menu instance with the specified …\nPrepares the upgrade menu for rendering by updating text …\nRecreates the upgrade menu layout for the current window …\nRenders the upgrade menu to the current render pass.\nHandles window resize events by updating the button …\nCreates a scaled text style based on the window height.\nMakes the upgrade menu visible and initializes it with …\nUpdates the upgrade menu’s internal state.\nUpdates the content of upgrade buttons with current …\nHandles upgrade selection, application, and persistence\nWhether the upgrade menu is currently visible and active\nMain WGPU renderer for the Mirador game.\nClean up GPU resources before dropping the renderer This …\nThe WGPU device for resource creation.\nReturns the argument unchanged.\nRenderer for the game over screen.\nMain render pipeline for the maze and floor.\nGets the current surface texture and creates a view for …\nCalls <code>U::from(self)</code>.\nRenderer for the loading screen maze and loading bar.\nInitializes a new <code>WgpuRenderer</code> and all associated GPU …\nThe WGPU queue for submitting commands.\nRenders text elements to the surface.\nRenders the title screen.\nThe WGPU surface for presenting rendered frames.\nThe surface configuration (format, size, etc.).\nRenderer for the title screen.\nRenders the current frame to the surface.\nTest maze dimensions (smaller than normal maze)\nCreates a locked enemy positioned further from the exit\nCreates a test maze grid with only perimeter walls\nCreates a test timer configuration with frozen time\nGets the center cell of the test maze for the exit\nReturns the world coordinates of the center of the room …\nConverts maze cell to wall grid coordinates for exit …\nPlaces the exit marker in the maze grid\nSets up the test environment")